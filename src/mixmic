#!/usr/bin/gjs

const GLib = imports.gi.GLib;
const Gio = imports.gi.Gio;
const Lang = imports.lang;
const Gtk = imports.gi.Gtk;

// A virtual Microphone:
// It has a name, a list of sources of sound (which are null sinks monitors)
// and one null sink that is its output
const VirtualMic = new Lang.Class({
    Name: 'VirtualMic 1',
    Sources: [],
    id:0,

    _init: function(name){
      this.Name = name;
      this.Sources = [];
    },

});

const Application = new Lang.Class({
    Name: 'MixMic',

    _init: function() {
        this.application = new Gtk.Application();
        
        this.application.connect('activate', Lang.bind(this, this._onActivate));
        this.application.connect('startup', Lang.bind(this, this._onStartup));
        this._mic = [];
        this._nbMics = 0;
    },
    
    _buildUI: function()Â {
        // Window
        this._window = new Gtk.ApplicationWindow({ 
            application: this.application,
            title: "MixMic: mix your mics",
            default_height: 400,
            default_width: 500,
            border_width: 10,
            window_position: Gtk.WindowPosition.CENTER });
        
        // Sidebar
        this._sidebar = new Gtk.StackSidebar();
        this._stack = new Gtk.Stack;
        this._stack.set_vexpand(true);
        this._stack.set_hexpand(true);
        this._sidebar.set_stack(this._stack);
                
        // Grid
        this._grid = new Gtk.Grid({
            row_spacing: 20
        });
        this._grid.attach(this._sidebar, 0, 0, 1, 1);
        this._grid.attach(this._stack, 1, 0, 1, 1);
        
        this._window.add(this._grid);
        
        //Header Bar
        this._window.set_titlebar(this._getHeader());
        this._window.show_all();

        // Add mic
        this._addMic();
    },
    
    _onActivate: function() {
        this._window.present();
    },
    
    _onStartup: function() {
        this._buildUI();
    },
   
    // Creates a new mic and its menu entries 
    _addMic: function() {
        let name = "Mic " + this._nbMics;

        // Create the mic object
        this._nbMics += 1;
        this._mic[this._nbMics] = new VirtualMic(name);

        // Build the mic UI
        let label = new Gtk.Label({label: "Connected sources"});
        let newSource = new Gtk.Button({label: "Add source"});
        newSource.valign = Gtk.Align.BASELINE;
        newSource.connect('clicked', Lang.bind(this, this._addSource, this._nbMics));

        let content = new Gtk.Box({
          orientation: Gtk.Orientation.VERTICAL,
          spacing: 50,
        });
        content.pack_start(label, true, true, 0);
        content.pack_end(newSource, false, false, 0);

        // Add to sidebar
        this._stack.add_titled(content, name, name);
        content.show_all();

        // Run creation script
        let [res, out, err, status] = GLib.spawn_command_line_sync('./createMic.sh "' + name + '"');
        if (status == 0) {
          this._mic[this._nbMics].id = out;
        } else {
          throw new Error('Could not get mic id');
        }
    },

    // Adds a source to the mic
    _addSource: function(widget, micID) {
      
        // Create window
        let popup = new Gtk.Window({
          title: "Sources",
          height_request: 200,
          width_request: 200,
          window_position: Gtk.WindowPosition.CENTER
        });
        let content = new Gtk.Box({
          orientation: Gtk.Orientation.VERTICAL,
          spacing: 50,
        });
        popup.add(content);

        // Add list
        let listBox = new Gtk.ListBox();
        listBox.selection_mode = Gtk.SelectionMode.SINGLE;
        content.pack_start(listBox, true, true, 0);

        // Display app list
        let [res, out, err, status] = GLib.spawn_command_line_sync('./listApps.sh');
        let list = (""+out).split("\n");
        for(let i = 0; i<list.length/2; i+=2)
        {
          let row = new Gtk.ListBoxRow();
          let label = new Gtk.Label({label: "" + list[i]});
          row.add(label);
          listBox.add(row);
        }
        listBox.show_all();
        content.show_all();
        popup.show_all();

        // Add selected app to the mic
        listBox.connect("row-activated", Lang.bind(this, this._bindApp, list, this._mic[micID], popup));
    },

    _bindApp: function(widget, row, list, mic, popup) {
        // Add app to the mic object
        let appName = list[2*row.get_index()];
        let appPID = list[2*row.get_index()+1];
        mic.Sources[mic.Sources.length]=appName;
        popup.close();

        // List app in the view

        // Execute pactl scripts
        let [res, out, err, status] = GLib.spawn_command_line_sync('./bindApp.sh ' + appPID + ' ' + mic.id);
        let sinkId = out[0];
        if (status != 0) {
          throw new Error('Could not bind app : ' + out);
        }
    },

    // Creates the header bar with a button to add a virtual mic
    _getHeader: function() {
        let headerBar, headerStart, imageAdd, buttonAdd;
        
        headerBar = new Gtk.HeaderBar();
        headerBar.set_title("MixMic");
        headerBar.set_subtitle("Mix your mics");
        headerBar.set_show_close_button(true);
        
        headerStart = new Gtk.Grid({
            column_spacing: headerBar.spacing
        });
        
        imageAdd = new Gtk.Image({
            icon_name: 'gtk-add',
            icon_size: Gtk.IconSize.SMALL_TOOLBAR
        });
        
        buttonAdd = new Gtk.Button({ image: imageAdd });
        buttonAdd.connect('clicked', Lang.bind(this, this._addMic));
        
        headerStart.attach(buttonAdd, 0, 0, 1, 1);
        headerBar.pack_start(headerStart);
        
        return headerBar;
    },

});

let app = new Application();
app.application.run(ARGV);
